package BitcoinEcon;

import java.awt.*;
import java.util.*;

import BitcoinEcon.Agent.AgentType;
import GenCol.*;

import model.modeling.*;
import model.simulation.*;

import view.modeling.ViewableComponent;
import view.modeling.ViewableDigraph;
import view.simView.*;

public class MultiServer extends ViewableDigraph {

    private MultiServer() {
        this("Multiserver", 0, 0, 0.0, 0.0);
    }

    public MultiServer(String name, int totalNumberTraders, int numberInitialTraders,
            double initialBitcoinsInitialTraders, double initialBitcoinPrice) {
        super(name);
        make(totalNumberTraders, numberInitialTraders, initialBitcoinsInitialTraders, initialBitcoinPrice);

        // TODO - add test inputs
    }

    private void make(int totalNumberTraders, int numberInitialTraders, double initialBitcoinsInitialTraders,
            double initialBitcoinPrice) {

        addInport("inTransactions");
        addInport("inBitcoinPrice");
        addInport("inTimer");

        addOutport("outOrders");
        addOutport("outHashRates");

        MultiServerCoord co = new MultiServerCoord("MultiSco");
        add(co);

        for (int i = 1; i <= totalNumberTraders; i++) {
            Agent p = new Agent(AgentType.NONE, i, initialBitcoinsInitialTraders, initialBitcoinPrice, false);
            add(p);
            p.setPreferredLocation(new Point(187, 22 + 80 * (i - 1)));
        }

        Iterator i = getComponents().iterator();
        while (i.hasNext()) {
            entity ent = (entity) i.next();
            devs agent = (devs) ent;
            if (!ent.equals(co)) {
                addCoupling(co, "outTransactions", agent, "inTransactions"); // use name for routing
                addCoupling(co, "outBitcoinPrice", agent, "inBitcoinPrice"); // use name for routing
                addCoupling(co, "outTimer", agent, "inTime"); // use name for routing

                addCoupling(agent, "outOrders", co, "inOrders");
                
                addCoupling(agent, "outHashRates", this, "outHashRates"); // This port will go to Transduder
                addCoupling(agent, "outBitcoins", this, "outBitcoins"); // This port will go to Transduder
            }

        }
        addCoupling(this, "inTransactions", co, "inTransactions");
        addCoupling(this, "inBitcoinPrice", co, "inBitcoinPrice");
        addCoupling(this, "inTimer", co, "inTimer");

        addCoupling(co, "outOrders", this, "outOrders");

        initialize();

        preferredSize = new Dimension(508, 32 + 80 * totalNumberTraders);
        co.setPreferredLocation(new Point(-7, 20));
    }

    /**
     * Automatically generated by the SimView program.
     * Do not edit this manually, as such changes will get overwritten.
     */
    public void layoutForSimView()
    {
        preferredSize = new Dimension(750, 252);
        ((ViewableComponent)withName("ViewableAtomic")).setPreferredLocation(new Point(283, 92));
        ((ViewableComponent)withName("MultiSco")).setPreferredLocation(new Point(-1, 27));
    }
}
