package BitcoinEcon;

import java.awt.Dimension;
import java.awt.Point;
import java.util.ArrayList;

import view.modeling.ViewableAtomic;
import view.modeling.ViewableComponent;
import view.modeling.ViewableDigraph;

public class Market extends ViewableDigraph {
    private ArrayList<Agent> agents; // List of agents
    private int Nt; // Total number of agents
    private OrderBook orderBook;
    private MultiServer multiServer;

    private static final int NUMBER_OF_INITIAL_TRADERS = 160;
    private static final int TOTAL_NUMBER_OF_TRADERS = 1000; // Total number of traders at the end of simulation
    private static final double INITIAL_BITCOINS_OF_INITIAL_TRADERS = 87.28;
    public static final double INITIAL_BITCOIN_PRICE = 0.0649; // The average price as of September 2010

    public Market() {
        super("Market");

        multiServer = new MultiServer("Multiserver", TOTAL_NUMBER_OF_TRADERS, NUMBER_OF_INITIAL_TRADERS,
                INITIAL_BITCOINS_OF_INITIAL_TRADERS, INITIAL_BITCOIN_PRICE);
        orderBook = new OrderBook();

        addInport("inBitcoinPrice");
        addInport("inTime");

        addOutport("outTransactions");
        addOutport("outHashRates");
        addOutport("outBitcoins");

        add(multiServer);
        add(orderBook); // Add the Model Book to the Market model

        addCoupling(this, "inBitcoinPrice", multiServer, "inBitcoinPrice");
        addCoupling(this, "inBitcoinPrice", orderBook, "inBitcoinPrice");
        addCoupling(this, "inTime", multiServer, "inTime");
        addCoupling(this, "inTime", orderBook, "inTime");

        addCoupling(multiServer, "outOrders", orderBook, "inOrders");

        addCoupling(orderBook, "outTransactions", this, "outTransactions");
        addCoupling(orderBook, "outTransactions", multiServer, "inTransactions");
        addCoupling(multiServer, "outHashRates", this, "outHashRates");
        addCoupling(multiServer, "outBitcoins", this, "outBitcoins");
    }

    public static long now() {
        return System.currentTimeMillis();
    }

    /**
     * Automatically generated by the SimView program. Do not edit this manually, as
     * such changes will get overwritten.
     */
    public void layoutForSimView() {
        preferredSize = new Dimension(975, 675);
        ((ViewableComponent) withName("Multiserver")).setPreferredLocation(new Point(15, 89));
        ((ViewableComponent) withName("OrderBook")).setPreferredLocation(new Point(150, 24));
    }
}
